import { DateRange, IntradayData, EquityDetails, EquityTradeInfo, EquityHistoricalData, SeriesData, IndexDetails, IndexHistoricalData, OptionChainData, EquityCorporateInfo, Glossary, Holiday, MarketStatus, MarketTurnover, IndexName, Circular, EquityMaster, PreOpenMarketData, DailyReport } from './interface';
export declare enum ApiList {
    GLOSSARY = "/api/cmsContent?url=/glossary",
    HOLIDAY_TRADING = "/api/holiday-master?type=trading",
    HOLIDAY_CLEARING = "/api/holiday-master?type=clearing",
    MARKET_STATUS = "/api/marketStatus",
    MARKET_TURNOVER = "/api/market-turnover",
    ALL_INDICES = "/api/allIndices",
    INDEX_NAMES = "/api/index-names",
    CIRCULARS = "/api/circulars",
    LATEST_CIRCULARS = "/api/latest-circular",
    EQUITY_MASTER = "/api/equity-master",
    MARKET_DATA_PRE_OPEN = "/api/market-data-pre-open?key=ALL",
    MERGED_DAILY_REPORTS_CAPITAL = "/api/merged-daily-reports?key=favCapital",
    MERGED_DAILY_REPORTS_DERIVATIVES = "/api/merged-daily-reports?key=favDerivatives",
    MERGED_DAILY_REPORTS_DEBT = "/api/merged-daily-reports?key=favDebt"
}
export declare class NseIndia {
    private readonly baseUrl;
    private readonly cookieMaxAge;
    private readonly baseHeaders;
    private userAgent;
    private cookies;
    private cookieUsedCount;
    private cookieExpiry;
    private noOfConnections;
    private getNseCookies;
    /**
     *
     * @param url NSE API's URL
     * @returns JSON data from NSE India
     */
    getData(url: string): Promise<any>;
    /**
     *
     * @param apiEndpoint
     * @returns
     */
    getDataByEndpoint(apiEndpoint: string): Promise<any>;
    /**
     *
     * @returns List of NSE equity symbols
     */
    getAllStockSymbols(): Promise<string[]>;
    /**
     *
     * @param symbol
     * @returns
     */
    getEquityDetails(symbol: string): Promise<EquityDetails>;
    /**
     *
     * @param symbol
     * @returns
     */
    getEquityTradeInfo(symbol: string): Promise<EquityTradeInfo>;
    /**
     *
     * @param symbol
     * @returns
     */
    getEquityCorporateInfo(symbol: string): Promise<EquityCorporateInfo>;
    /**
     *
     * @param symbol
     * @param isPreOpenData
     * @returns
     */
    getEquityIntradayData(symbol: string, isPreOpenData?: boolean): Promise<IntradayData>;
    /**
     *
     * @param symbol
     * @param range
     * @returns
     */
    getEquityHistoricalData(symbol: string, range?: DateRange): Promise<EquityHistoricalData[]>;
    /**
     *
     * @param symbol
     * @returns
     */
    getEquitySeries(symbol: string): Promise<SeriesData>;
    /**
     *
     * @param index
     * @returns
     */
    getEquityStockIndices(index: string): Promise<IndexDetails>;
    /**
     *
     * @param index
     * @param isPreOpenData
     * @returns
     */
    getIndexIntradayData(index: string, isPreOpenData?: boolean): Promise<IntradayData>;
    /**
     *
     * @param index
     * @param range
     * @returns
     */
    getIndexHistoricalData(index: string, range: DateRange): Promise<IndexHistoricalData[]>;
    /**
     *
     * @param indexSymbol
     * @returns
     */
    getIndexOptionChain(indexSymbol: string): Promise<OptionChainData>;
    /**
     *
     * @param symbol
     * @returns
     */
    getEquityOptionChain(symbol: string): Promise<OptionChainData>;
    /**
         *
         * @param symbol
         * @returns
         */
    getCommodityOptionChain(symbol: string): Promise<OptionChainData>;
    /**
     * Get NSE glossary content
     * @returns Glossary content
     */
    getGlossary(): Promise<Glossary>;
    /**
     * Get trading holidays
     * @returns List of trading holidays
     */
    getTradingHolidays(): Promise<Holiday[]>;
    /**
     * Get clearing holidays
     * @returns List of clearing holidays
     */
    getClearingHolidays(): Promise<Holiday[]>;
    /**
     * Get market status
     * @returns Current market status
     */
    getMarketStatus(): Promise<MarketStatus>;
    /**
     * Get market turnover
     * @returns Market turnover data
     */
    getMarketTurnover(): Promise<MarketTurnover>;
    /**
     * Get all indices
     * @returns List of all indices
     */
    getAllIndices(): Promise<IndexDetails[]>;
    /**
     * Get index names
     * @returns List of index names
     */
    getIndexNames(): Promise<IndexName[]>;
    /**
     * Get circulars
     * @returns List of circulars
     */
    getCirculars(): Promise<Circular[]>;
    /**
     * Get latest circulars
     * @returns List of latest circulars
     */
    getLatestCirculars(): Promise<Circular[]>;
    /**
     * Get equity master
     * @returns Equity master data with categorized indices
     */
    getEquityMaster(): Promise<EquityMaster>;
    /**
     * Get pre-open market data
     * @returns Pre-open market data
     */
    getPreOpenMarketData(): Promise<PreOpenMarketData[]>;
    /**
     * Get merged daily reports for capital market
     * @returns Daily reports for capital market
     */
    getMergedDailyReportsCapital(): Promise<DailyReport[]>;
    /**
     * Get merged daily reports for derivatives
     * @returns Daily reports for derivatives
     */
    getMergedDailyReportsDerivatives(): Promise<DailyReport[]>;
    /**
     * Get merged daily reports for debt market
     * @returns Daily reports for debt market
     */
    getMergedDailyReportsDebt(): Promise<DailyReport[]>;
}
//# sourceMappingURL=index.d.ts.map